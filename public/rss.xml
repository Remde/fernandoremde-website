<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Fernando's Website]]></title><description><![CDATA[My personal portfolio and blog]]></description><link>http://fernandoremde.com</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 08 Jun 2020 14:05:10 GMT</lastBuildDate><item><title><![CDATA[How the backtracking algorithm works]]></title><description><![CDATA[”((()))”,
  ”(()())”,
  ”(())()”,
  ”()(())”,
  ”()()()”
 Seems like what we want.  If you are anything like me a few years ago, the…]]></description><link>http://fernandoremde.com/blog/backtracking/</link><guid isPermaLink="false">http://fernandoremde.com/blog/backtracking/</guid><pubDate>Fri, 29 May 2020 21:56:03 GMT</pubDate><content:encoded>&lt;p&gt;It was a beautiful day in Pelotas, Brazil. I was a high school student who wanted to compete in a local programming olympiad, so I was studying the to-be-regurgitated algorithms. I came across this particular problem:
&lt;h3&gt;Generate parentheses&lt;/h3&gt;
&lt;p&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. Example:&lt;/p&gt;
&lt;p&gt;When n = 3, a solution set is
&lt;p&gt;[
”((()))”,
”(()())”,
”(())()”,
”()(())”,
”()()()”
]&lt;/p&gt;
&lt;/p&gt;
&lt;p&gt;I don&apos;t remember exactly what I tried to do before reading the solution. Using stacks, maybe, which might even have worked. But, unbeknownst to me at the time, the best answer was something called &quot;backtracking.&quot;
&lt;h3&gt;Backtracking&lt;/h3&gt;
&lt;p&gt;&quot;Backtracking is a general algorithm for finding all (or some) solutions to some computational problems, notably constraint satisfaction problems, that incrementally builds candidates to the solutions, and abandons a candidate (&quot;backtracks&quot;) as soon as it determines that the candidate cannot possibly be completed to a valid solution.&quot; - Wikipedia.
&lt;p&gt;Seems like what we want.&lt;/p&gt;
&lt;/p&gt;
&lt;h3&gt;Blueprint&lt;/h3&gt;
&lt;p&gt;We have almost always the same skeleton. Start with an empty data structure that will eventually be our final answer (in the example case, an array); an empty data structure that will be our current iteration (in the example case, a string). We call a helper function with both items, an input (in the example case, the number of parentheses n), maybe a few extras depending on the problem. On the helper function, we have a constraint. When CURRENT meets constraint, it gets added to FINAL. If it&apos;s not there yet, it calls itself again with every combination possible. Back to the main function, you return the final output.
&lt;p&gt; If you are anything like me a few years ago, the solution below will blow your mind.&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;The solution&lt;/h3&gt;
&lt;p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateParenthesis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#our final data structure&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#input n, current string, final output, open and right parentheses count&lt;/span&gt;
    backtrack&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; output

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;backtrack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#our constraint. when n=3, every string will have 6 parentheses.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#so we append it.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; output &lt;span class=&quot;token comment&quot;&gt;#and return it.&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;#else we go to our recursive calls&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#left always comes first cause it&apos;s an open parentheses&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#so we update our current string with &quot;(&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        backtrack&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;#and right comes after left. so we update our current with &quot;)&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        backtrack&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; current&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; right&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If your mind hasn’t been blown yet, let’s try and analyze what happens here. Let’s go with n = 2 for the sake of simplicity.&lt;/p&gt;
&lt;p&gt;Call 0: backtrack function is called with num=2, current=&quot;&quot;, output = [], left = 0, right = 0. Is len(current) == 2*num? No, it&apos;s 0, not 4, so we keep going. Is left less than 2? Yes, 0 &lt; 3, so we go to our next call and this current call is now at the bottom of the stack.&lt;/p&gt;
&lt;p&gt;Call 1: backtrack function is called with num=2, current=&quot;(&quot;, output=[], left=1, right = 0. len(current) &lt; 4, but again left&lt;num. 1 to the stack, new function called.&lt;/p&gt;
&lt;p&gt;Call 2: backtrack function is called with num=2, current=&quot;((&quot;, output=[], left=2, right=0. len(current) still &lt; 4, but this time left isn&apos;t less than 2. Is right &lt; left? Yes. New call.&lt;/p&gt;
&lt;p&gt;Call 3: backtrack called with num=2, current=&quot;(()&quot;, output=[], left=2, right=1. len(current) &lt; 4, left == num, right &lt; left. New call.&lt;/p&gt;
&lt;p&gt;Call 4: backtrack called with num=2, current=&quot;(())&quot;, output=[], left=2, right=2. len(current) is 4, so we append it to the output and return. Back to call 3, which now ended, so back to call 2, which also ended, so back to call 1.&lt;/p&gt;
&lt;p&gt;Call 1: backtrack function had num=2, current=&quot;(&quot;, output=[&quot;(())&quot;] (now updated), left=1, right=0. First condition already called, now to the second, which is true, right is less than left, so we now call again backtrack but with &quot;()&quot; as current.&lt;/p&gt;
You can certainly see where this is going, so I&apos;ll stop.
&lt;p&gt;Our time complexity here is O(4^n/sqrt(n)) because each valid sequence has at most n steps during the backtracking procedure. Space is also O(4^n/sqrt(n)) because of the stack.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;Maybe I just feel nostalgic because it&apos;s the first &quot;hard&quot; algorithm I learned, but I just love backtracking. A few good problems to solve using the same principles are: Combination Sum, Find All Permutations, Letter Combinations of a Phone Number, and Find All Subsets.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Number of distinct subsequences of string2 in string1]]></title><description><![CDATA[Answer: 4. The matches are: [s0,s11,s12], [s10,s11,s15], [s10, s14, s15], [s13,s14,s15]. This creates our look-up table. Using the main…]]></description><link>http://fernandoremde.com/blog/counting-subsequences/</link><guid isPermaLink="false">http://fernandoremde.com/blog/counting-subsequences/</guid><pubDate>Sun, 17 May 2020 10:12:03 GMT</pubDate><content:encoded>&lt;p&gt;I got this problem in an interview this week and found it very interesting. Well... To be honest, at first glance, I found it intimidating.
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;Given two strings, s1 and s2, how many subsequences of s1 are equal to s2? Example:&lt;/p&gt;
&lt;p&gt;s1 = ABCABC, s2 = ABC
&lt;p&gt;Answer: 4.&lt;/p&gt;
&lt;p&gt;The matches are: [s[0],s1[1],s1[2]], [s1[0],s1[1],s1[5]], [s1[0], s1[4], s1[5]], [s1[3],s1[4],s1[5]].&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;I will refer to this example as &quot;main example&quot; throughout this explanation.&lt;/p&gt;
&lt;h3&gt;Intuition&lt;/h3&gt;
&lt;p&gt;I broke up this problem in two situations. Either the last digit was the same or it wasn&apos;t.&lt;/p&gt;
&lt;p&gt;If it wasn&apos;t the same, we could search for subsequences ignoring the last digit in s1. For instance, if s1 = ABCABCD and s2 = ABC, there wouldn&apos;t be any difference from the main example. The answer would still be 4, and the indexes the same. So we could ignore the D and look for solutions in the rest of the string.&lt;/p&gt;
&lt;p&gt;The second case is a bit more tricky. When last digit is the same for both strings, we have again two situations. You either USE the last digit of string1 or you don&apos;t. For instance, in the first array of the solution for the main example, we didn&apos;t use the last digit, s[5]. In this case, we do just like we did before. We ignore it and look for solutions in (string1.length - 1). For the other three we did, so in this case we look for the rest of the solution in (string1.length-1) and (string2.length-1).&lt;/p&gt;
&lt;p&gt;This is the complicated part. Read as many times as needed. When you truly understand this the rest of the problem comes very easily.&lt;/p&gt;
&lt;h3&gt;Exponential solution&lt;/h3&gt;
&lt;p&gt;There&apos;s a recursive, exponential solution to this problem that came quickly to me. I won&apos;t be going through it because I didn&apos;t think it was acceptable. It follows the same intuition as the dynamic approach, so it&apos;s trivial once you understand the principle.&lt;p&gt;
&lt;h3&gt;Dynamic programming&lt;/h3&gt;
&lt;p&gt;As per usual with dynamic programming, we&apos;ll use a lookup table to store the subproblem results we find. This is the difference between this approach and the recursive approach, by the way. The recursive approach will just recalculate them every time.&lt;/p&gt;
&lt;p&gt;I solved this problem in Python, which I actually am not a huge fan for dynamic programming solutions, but I was a little nervous and using my &quot;main language for problems&quot; so to speak felt more comfortable at the time. Anyway, going through the solution:
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;len1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
len2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This creates our look-up table. Using the main example, we’ll have 4 columns to represent string2, “ABC”, and our 7 rows for “ABCABC.” Why 4 and 7 instead of 3 and 6? You have to count the base case when the strings are empty.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we filled the first row and first column. They will look like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;” ”&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;B&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;” ”&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is the base table. Take a look at it and try to comprehend. If both are empty, then there’s one substring found, ” ” itself. If string2 is ” ”, the final count will always be one, since the only match will be ” “. If string2 is anything but empty, however, and string1 is empty, there won’t be any matches, because obviously you won’t find a string in something empty. It’s easy once it clicks!
Now let’s go through the rest of the table and fill it. I will explain the logic afterwards.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; string1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; string2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;  
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will refer to table[A1,B], for example, as the place where the first A of “ABCABC” and the B of “ABC” intersect for the purpose of clarity.
When we go to table[A1,A], it’s a match. There’s an A in A1. So we add the values of the cell on top of it and the cell on top-left of it. So, for instance, when we go to table[B1,B], the result will be the sum of table[A1,B] and table[A1,A]. So, back to table[A1,A], we fill it with table[” “,A] + table[” ”,” ”]. Thats our first if clause.&lt;/p&gt;
&lt;p&gt;If they are no match, our else clause, we just copy the value to the top of our cell. So when we have table[B1,A], there’s no match, so it just copies [A1, A], which is one. This way we carry forward our current result when there are no matches.&lt;/p&gt;
&lt;p&gt;Following the algorithm, the final table will be this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;” ”&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;B&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;” ”&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;B&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;C&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Take a moment to understand this. When you look at the B column, for example, you are looking at how many times the string “AB” will have a match on string1. The first “1” in this column is in  the B row, because AB is a perfect match for AB. Then it won’t change for a while, it’s 1 again because it’s “ABC”, which there’s still only one subsequence (ABc), and another 1 for “ABCA.” When we get to the second B in our rows, the string1 is “ABCAB”, and thus we have three matches for AB. ABcab, AbcaB, and abcAB.&lt;/p&gt;
&lt;p&gt;We finally have our final result at the end of our table. So we return it.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;len1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;len2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The complete code is:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;countSubsequences&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; string2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;#initialize lengths and table size&lt;/span&gt;
  len1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  len2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;string2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  table &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#base case when str1 or str2 is empty&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#finish filling the table&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len1&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len2&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; string1&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; string2&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;  
      &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;#return last element&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; table&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;len1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;len2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is O(NM) time and space solution, m and n being the length for each string.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;That is a very hard problem to understand, but after it clicks it&apos;s really simple. I&apos;m not sure how I feel about having this in an interview. Dynamic programming, to me, seems less about algorithmic thinking and manipulation of data and more of having an &quot;A-HA!&quot; moment and going from there.
It&apos;s an interesting problem, though. I don&apos;t know how well I explained it. Probably not very! But, as I said before, it&apos;s very easy once it clicks.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Quarantined]]></title><description><![CDATA[Jokes aside, I miss people, going outside, and the situation is truly grim. Keep safe, everybody.]]></description><link>http://fernandoremde.com/blog/Quarantine/</link><guid isPermaLink="false">http://fernandoremde.com/blog/Quarantine/</guid><pubDate>Sat, 28 Mar 2020 12:12:03 GMT</pubDate><content:encoded>&lt;p&gt;So my vacation is lasting more than it should have. Except I can&apos;t leave home, can&apos;t go to the gym, can&apos;t see my friends and good part of my family.
&lt;h3&gt;Gym&lt;/h3&gt;
&lt;p&gt;With some creativity I managed to get myself a homegym. I have a bar with some weights, about 30kg total, which gives me some accessories. But for the main lifts I made a 40kg sandbag using tape and sand, and a 30kg one. It&apos;s crazy how much you can do with it. Just carrying them around is a great workout, honestly, but bear squats, floor to shoulder, and presses have been great.&lt;p&gt;
&lt;h3&gt;Studying&lt;/h3&gt;
&lt;p&gt;Not leaving the house gives me a LOT of time and incentive to study though, that&apos;s for sure. I&apos;ve been keeping up with my projects, Gardn is basically ready, my website is more beautiful than ever, and I&apos;ve been studying film history and how to watch and critique. It&apos;s been fun, not gonna lie, you know, except for the imminent threat of a deadly virus.
&lt;p&gt;Jokes aside, I miss people, going outside, and the situation is truly grim. Keep safe, everybody.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tony Stark]]></title><link>http://fernandoremde.com/blog/tony-stark/</link><guid isPermaLink="false">http://fernandoremde.com/blog/tony-stark/</guid><pubDate>Mon, 17 Feb 2020 10:12:03 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;ve been tracking my calories and macros for a while now. Since January 2019, to be precise. I&apos;ll eventually, in another point this year, plot my weight changes, body fat percentage, bench press/deadlift/press/squat, and calories eaten in a nice graph. For now though, I&apos;ll just make a promise to myself to start my personal assistant. That&apos;s my first step to become the Iron Man himself.
&lt;h3&gt;A database&lt;/h3&gt;
&lt;p&gt;It&apos;s funny how much fanciness we can add to a database. That&apos;s what will be at first, at least, just a database with all food I eat that tracks my calories and macros and builds statistics on that. A quick interface, maybe linked to my website or my Digital Ocean server, and I&apos;ll have something more customized than any MyFitnessPal around there. Fortunately I&apos;ve been tracking my calories in a Google Sheet, and not in some random app, so I have basically a database. Just have to insert it properly with SQL.&lt;p&gt;</content:encoded></item><item><title><![CDATA[Summer Vaycay]]></title><link>http://fernandoremde.com/blog/summer-vaycay/</link><guid isPermaLink="false">http://fernandoremde.com/blog/summer-vaycay/</guid><pubDate>Sat, 08 Feb 2020 14:12:03 GMT</pubDate><content:encoded>&lt;p&gt;This last semester I bit a little more than I could chew. Or, actually, exactly what I could chew, since I handled it, but... to what cost?&lt;/p&gt;
&lt;p&gt;Not that BIG of a cost, honestly. Guess I can&apos;t be as dramatic as some writers. But it did took a toll on my will to program and be productive, certainly. I haven&apos;t had much time to just work on personal projects or learn some new tech, which I&apos;ve always liked to do. I mean, time is not exactly the concern, but I was feeling burned out.&lt;/p&gt;
&lt;h3&gt;Vacation&lt;/h3&gt;
But it&apos;s summer time, and you know what that means, gotta head on to the beach and do some beachy things. Or code. I&apos;m glad my passion and creativity is coming back. I re-started this blog, learned a little bit more of React, started Redux, and will be doing a Web Message App to improve my back-end skills. It&apos;s looking good. I&apos;ve been feeling great and looking forward to whatever happens this year.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Standing Desks]]></title><link>http://fernandoremde.com/blog/standing-desk/</link><guid isPermaLink="false">http://fernandoremde.com/blog/standing-desk/</guid><pubDate>Tue, 28 Jan 2020 18:12:03 GMT</pubDate><content:encoded>&lt;p&gt;I have recently &quot;acquired&quot; a standing desk after reading so much about it. I use the term acquire loosely here because I just grabbed an old bar desk we have here at my home and put my monitor on top of a box and, lo and behold, a standing desk. The main reason for that were the benefits to posture, hips and back. I have been suffering with serious posture problems for my whole life and, even though everything is much better now after consistently lifting weights and stretching, I still could use some improvements.&lt;/p&gt;
&lt;h3&gt;The first days&lt;/h3&gt;
&lt;p&gt;Well, they sucked hard. For the first 3 or so days I couldn&apos;t even stand properly on my feet at the end of the day. I was still sitting a little (on the couch for the lack of a better option in my current &quot;office&quot;), but only 20% of the time. But I decided to stick with it anyway.&lt;/p&gt;
&lt;p&gt;It started to get better a week later. I sat down to watch some Udemy videos and realized I wasn&apos;t paying as much attention as I was earlier. Then I realized that it was because, while standing, my concentration levels were much higher. I wouldn&apos;t feel sleepy, I wouldn&apos;t randomly lose focus. And then all of the sudden I realized that, yeah, I should just stay up.&lt;/p&gt;
&lt;h3&gt;Conclusion so far&lt;/h3&gt;
&lt;p&gt;When I&apos;m tackling a hard problem, doing some mindless grind, or writing a blog post, I&apos;d rather sit. Or lay down. Or something in between. But still force myself to be up for at least 30-50% of the time. When I&apos;m learning, or doing something that requires my attention but doesn&apos;t require me to problem solve, I go like 90% up 10% sit. It&apos;s done wonders for my back as well. Much less soreness, my hips are much less tight, my hamstrings and core feel stronger and my feet don&apos;t hurt anymore. I&apos;d definitely recommend trying to stay up.</content:encoded></item><item><title><![CDATA[Blogging is Back]]></title><link>http://fernandoremde.com/blog/hello-world/</link><guid isPermaLink="false">http://fernandoremde.com/blog/hello-world/</guid><pubDate>Fri, 17 Jan 2020 22:12:03 GMT</pubDate><content:encoded>&lt;p&gt;It&apos;s crazy that I own this domain since I was 16 — six years ago. At the time it started as a blog, too, but a
Wordpress blog with short stories and poems. I wouldn&apos;t show it to anyone, but nevertheless it ended up being the basis for a few lyrics of songs that I wrote in the past years. (Hope I can talk about music here, too).
&lt;h3&gt;Goals moving forward&lt;/h3&gt;
The main focus of this new iteration, however, is to have a more &quot;serious&quot; note to it, to document projects, talk about programming, technology, fitness, finance, etc. I love all kinds of art and I would never leave it out of any project of mine, but when I eventually write about it here it will have a bit more of an analytical, introspective tone to it.&lt;/p&gt;
&lt;p&gt;Unfortunately there won&apos;t be short stories and poems! It&apos;s still a thing for me — I guess so at least, haven&apos;t written any in a while — but it still is more of a private, me-alone thing.&lt;/p&gt;
&lt;h3&gt;About the technology&lt;/h3&gt;
I have written this everywhere in the last days, but I finally settled for Gatsby which uses the React framework for front-end and generates these awesome static pages. I am also paying for a 5$ a month DigitalOcean droplet, which I strongly recommend, as my server to deploy to. They have amazing guides for everything as well, which is great. I was already familiar with hosting and remote servers (any Minecraft ex-addicts?), but even then the guides came in very handy. Excellent service.
&lt;/p&gt;</content:encoded></item></channel></rss>